package com.encodeering.aoc.y2016.d2

import java.lang.Math.floor
import java.lang.Math.max
import java.lang.Math.min

/**
 * @author clausen - encodeering@gmail.com
 */
object Day2 {

    @JvmStatic
    fun main(args : Array<String>) {
        val description =
        """
        RDRRDLRRUDRUUUULDDRDUULLDUULDURDDUDRULDLUDDRLRDUDDURRRRURDURLLRDRUUULDLLLURDRLLULLUULULLLDLLLRRURRLRDUULRURRUDRRDRLURLRURLLULRUURRUURDDLDRDLDLLUDUULLLUUUUDULLDRRUURLDURDDDDDRLLRRURDLUDRRUUDLRRLLRDURDUDDDLRDDRDLRULLUULRULRLLULDDRURUUDLDDULDRLLURDDUDDUDRDUDLDRRRDURRLDRDRLDLLDUDDDULULRRULRLLURDRRDDUUUUUULRUDLRRDURDLRDLUDLDURUDDUUURUDLUUULDLRDURDLDUUDLDDDURUUDUUDRLRDULLDUULUDRUDRLRRRDLLDRUDULRRUDDURLDRURRLLRRRDRLLDLULULRRUURRURLLUDRRLRULURLDDDDDURUDRRRRULLUUDLDDLUUL
        ULURUDLULDULDLLDDLLLDRRLLUDRRDRDUDURUDLRRRRUDRDDURLRRULLDLURLDULLUDDLUDURDUURRRRLDLRLDDULLRURLULLDDRUDLRRRLDRRRDLDRLLDDRRDDLUUDRUDDLULRURLDURRLLDLRUDLLRRUULUDRLLLRLDULURRRRRDDUURDRRUUDULRUULDDULRLUDLUDDULLRLRDDLRLLURRRULDLRRRUURRLDDRDLRDLRRDRDLDRDUDRDURUUDRLRRULRDLLDLLRRRDRLDRLRLRLLLURURDULUUDDRLLDDDRURRURLRDDULLRURUDRRDRLRRRLDLRLRULDRLUURRUUULRLDLLURLLLDLLLDRRDULRURRRRLUDLLRRUDLRUDRURDRRDLUUURRDLRLRUUUDURDLUDURRUUDURLUDDDULLDRDLLDDDRLDDDRLDLDDDDUDUUDURUUDULRDDLULDRDRLURLUDRDLUULLULRLULRDDRULDUDDURUURULUDLUURLURU
        URLURDDRLLURRRLDLDLUDUURDRUDLLLRRDLUUULRRLURRRLUDUDLRLDDRUDLRRRULUDUDLLLULULLLRUDULDDDLLLRRRLRURDULUDDDULDLULURRRDLURDLRLLDUDRUDURDRRURULDRDUDLLRDDDUDDURLUULLULRDRRLDDLDURLRRRLDRDLDULRULRRRLRLLDULRDLURLRUUDURRUUDLLUDRUDLRLDUUDLURRRDDUUDUDRLDLDDRURDDLLDDRDLRLRDLLLUDLUUDRLRLRDDRDLRDLLUULLLLUULLDLLDLRDLRLRRLUUDLLRLRUDRURULRLRLULUDRLLUDDUDDULRLDDRUUUURULDRRULLLDUURULUDRLLURLRRLDLRRLDDRRRDUDDUDLDDLULUDDUURDLLLRLDLRDRUUUUUDDDLDRDDRRRLRURRRRDURDRURUDLURRURDRLRUUDDLDRRULLDURDRLRRDURURUULRDUDLDRDDLULULRDRRUDDRLLRLULRLLUUDRDUUDDUDLRUUDLLUULLRUULUDDLURRRLLDRLRRLLRULLDUULURLLLLUUULDR
        LDUURULLRLDRRUUDUUUURUUUDDDURRDDLRDLLRDDRULDDUURUDDURLLUDRDUDRDULDRRRLULUDRULLLLDRLLDRDLDLLRURULUDDDDURDDDRLLUDLDRULRDLDUDDDUUDLLRLLLDLRLRLRRUDDULDDDUDLDDLUDDULDLLLLULLLLDDURDDURRRDDRLRLLUDLLUDDDUDURUDRLRDRULULDDRULDLULULLRUULRLDULUURRDRDRRDLDDDRRLUULDLUDRDDUDLRURULLDDURLDDRULUDLDDDRDRLLRDLLUURRRURDRLRURLDDLURDRURDDURLLRLRUDUUDLDUDURRDDURDRDDUDDDUDUURURDDLLRUUDDRRDULDDLLDLRULUULRUUDLLDRLULDULDDUDLULRULDRLLDUULDDDLRLLRLULDDULDDRRRLDRRLURULRDDRDLRRDUDDRDRRRRUDUDLLRRDRRURRUURDRULDDUDURLUDDURDUDRDUULLDRURUURURDRRLDDLDLUURLULRUDURDRUUURRURRDRUDRUURDURLRULULLLULDLLDLRRLDRDLUULUDDDLRDRLRLDRUDUDRLLRL
        LURLUURLURDUUDRUDLDLLURRRDLDRRRULDDRRDRDUUDRUDURDDDURLUDDLULUULRRLLRULUDRDDRRRLDURDUDDURDDDLRLDDLULLDRDDLUUDUURRRLULRUURRRRLLULDUDRDUURRRURRDRDUDUDLUDULLDLDDRLUDRURDULURLURRLLURLLLRLUURLRUDLUDDRLURRUULULRLURRURUDURDLDLDDUDDRDLLRLLRRULDDRUDURUDDDUDLLRDLRUDULLLRRRUURUDUUULLRDUDRURUDULLDLLUUUDRULRLLRRDDDDUDULDRDRLLDDLLDDDURRUDURLDLRDRUURDDURLRDRURLRRLLRLULDRRLRUDURDUURRLUUULUDDDLRLULRDRLLURRRDLURDUUDRRRLUURRLLUDLUDLUULLRRDLLRDDRURRUURLDDLRLRLRUDLDLRLRDRRDLLLRDLRDUDLLDDDRD
        """

        println ("bathroom code: ${decode (Panel (3, 3), description)}")

        val meeting = Alphabet.meeting (listOf (
            null, null, "1", null, null,
            null,  "2", "3", "4" , null,
             "5",  "6", "7", "8" , "9",
            null,  "A", "B", "C" , null,
            null, null, "D", null, null
        ))

        println ("bathroom code: ${decode (Panel (5, 5, meeting, 0 to 3), description)}")
    }

}

object Alphabet {

    val simple : (Pair<Int, Int>, Pair<Int, Int>) -> CharSequence = { (_, width), (x, y) -> (1 + x + y * width).toString () }

    val meeting : (List<CharSequence?>) -> (Pair<Int, Int>, Pair<Int, Int>) -> CharSequence? = {
                               codepoints -> {
        (_, width), (x,  y) -> codepoints[x + y * width]
    }}

}

fun decode (panel : Panel, description : String) : String {
    val    series = description.trimIndent ().lineSequence ().map { it.map (Any::toString).map (Slide::valueOf) }
    return series.map {
        it.forEach (panel::slide)
                    panel.press ()
    }.joinToString (transform = CharSequence::toString, separator = "")
}

class Panel (val height : Int, val width : Int, val alphabet : (Pair<Int, Int>, Pair<Int, Int>) -> CharSequence? = Alphabet.simple, var button : Pair<Int, Int> = center (height, width)) {

    val dimension : Pair<Int, Int> get () = height to width

    fun slide         (slide : Slide) : Unit {
        val candidate = when (slide) {
            Slide.U -> button.copy (second = max (0,          button.second - 1))
            Slide.D -> button.copy (second = min (height - 1, button.second + 1))
            Slide.L -> button.copy (first  = max (0,          button.first  - 1))
            Slide.R -> button.copy (first  = min (width - 1,  button.first  + 1))
        }

        alphabet (dimension, candidate)?.let { button = candidate }
    }

    fun press () : CharSequence = alphabet (dimension, button)!!

}

fun center (height : Int, width : Int) = Pair (
    floor (width.toDouble  () / 2).toInt (),
    floor (height.toDouble () / 2).toInt ()
)

enum class Slide {

    U, D, R, L,

}
